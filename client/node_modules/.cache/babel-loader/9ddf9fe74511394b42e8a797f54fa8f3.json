{"ast":null,"code":"import * as api from '../api';\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: 'START_LOADING'\n    });\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: 'FETCH_ALL',\n      payload: data\n    });\n    dispatch({\n      type: 'END_LOADING'\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: 'START_LOADING'\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: 'FETCH_POST',\n      payload: data\n    });\n    dispatch({\n      type: 'END_LOADING'\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: 'START_LOADING'\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: 'FETCH_BY_SEARCH',\n      payload: data\n    });\n    dispatch({\n      type: 'END_LOADING'\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    dispatch({\n      type: 'START_LOADING'\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: 'CREATE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: 'UPDATE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: 'DELETE',\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: 'LIKE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const commentPost = (value, id) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.comment(value, id);\n    dispatch({\n      type: 'COMMENT',\n      payload: data\n    });\n    return data.comments;\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/sabinthapa/Desktop/project-portfolio-mern-application/client/src/actions/posts.js"],"names":["api","getPosts","page","dispatch","type","data","currentPage","numberOfPages","fetchPosts","payload","error","console","log","message","getPost","id","fetchPost","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","deletePost","likePost","commentPost","value","comment","comments"],"mappings":"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","sourcesContent":["import * as api from '../api';\n\nexport const getPosts = (page) => async(dispatch) =>{\n    try {\n        dispatch({\n            type: 'START_LOADING'\n        });\n        const { data: { data, currentPage, numberOfPages } } = await api.fetchPosts(page);\n      dispatch({\n          type: 'FETCH_ALL',\n          payload: data\n      });\n      dispatch({\n        type: 'END_LOADING'\n      });\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const getPost = (id) => async(dispatch) =>{\n    try {\n        dispatch({\n            type: 'START_LOADING'\n        });\n      const {data} = await api.fetchPost(id);  \n      dispatch({\n          type: 'FETCH_POST',\n          payload: data\n      });\n      dispatch({\n        type: 'END_LOADING'\n      });\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\nexport const getPostsBySearch = (searchQuery) => async(dispatch) =>{\n    try {\n        dispatch({\n            type: 'START_LOADING'\n        });\n        const {data : {data}} = await api.fetchPostsBySearch(searchQuery);\n        dispatch({\n            type: 'FETCH_BY_SEARCH',\n            payload: data\n        });\n        dispatch({\n            type: 'END_LOADING'\n          });\n    } catch (error) {\n        console.log(error);\n    }\n}\nexport const createPost = (post) => async(dispatch)=>{\n    try {\n        dispatch({\n            type: 'START_LOADING'\n        });\n        const {data} = await api.createPost(post);\n        dispatch({\n            type: 'CREATE',\n            payload: data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const updatePost= (id,post) => async(dispatch) => {\n    try {\n        const {data} =await api.updatePost(id,post);\n        dispatch({\n            type: 'UPDATE',\n            payload: data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const deletePost = (id) => async(dispatch) => {\n    try {\n        await api.deletePost(id);\n\n        dispatch({\n            type: 'DELETE',\n            payload: id\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const likePost = (id) => async(dispatch) =>{\n    try {\n        const {data} = await api.likePost(id);\n        dispatch({\n            type: 'LIKE',\n            payload: data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const commentPost = (value, id) => async(dispatch) =>{\n    try {\n       const {data} = await api.comment(value,id);\n       dispatch ({\n           type: 'COMMENT',\n           payload: data\n       });\n       return data.comments;\n    } catch (error) {\n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}
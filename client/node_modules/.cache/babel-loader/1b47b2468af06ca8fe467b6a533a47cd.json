{"ast":null,"code":"import * as api from '../api';\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: 'START_LOADING'\n    });\n    const {\n      data\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: 'FETCH_ALL',\n      payload: data\n    });\n    dispatch({\n      type: 'END_LOADING'\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: 'START_LOADING'\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: 'FETCH_BY_SEARCH',\n      payload: data\n    });\n    dispatch({\n      type: 'END_LOADING'\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    dispatch({\n      type: 'START_LOADING'\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: 'CREATE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: 'UPDATE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: 'DELETE',\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: 'LIKE',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/sabinthapa/Desktop/project-portfolio-mern-application/client/src/actions/posts.js"],"names":["api","getPosts","page","dispatch","type","data","fetchPosts","payload","error","console","log","message","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","deletePost","likePost"],"mappings":"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","sourcesContent":["import * as api from '../api';\n\nexport const getPosts = (page) => async(dispatch) =>{\n    try {\n        dispatch({\n            type: 'START_LOADING'\n        });\n      const {data} = await api.fetchPosts(page);  \n      dispatch({\n          type: 'FETCH_ALL',\n          payload: data\n      });\n      dispatch({\n        type: 'END_LOADING'\n      });\n    } catch (error) {\n        console.log(error.message);\n    }\n}\nexport const getPostsBySearch = (searchQuery) => async(dispatch) =>{\n    try {\n        dispatch({\n            type: 'START_LOADING'\n        });\n        const {data : {data}} = await api.fetchPostsBySearch(searchQuery);\n        dispatch({\n            type: 'FETCH_BY_SEARCH',\n            payload: data\n        });\n        dispatch({\n            type: 'END_LOADING'\n          });\n    } catch (error) {\n        console.log(error);\n    }\n}\nexport const createPost = (post) => async(dispatch)=>{\n    try {\n        dispatch({\n            type: 'START_LOADING'\n        });\n        const {data} = await api.createPost(post);\n        dispatch({\n            type: 'CREATE',\n            payload: data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const updatePost= (id,post) => async(dispatch) => {\n    try {\n        const {data} =await api.updatePost(id,post);\n        dispatch({\n            type: 'UPDATE',\n            payload: data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const deletePost = (id) => async(dispatch) => {\n    try {\n        await api.deletePost(id);\n\n        dispatch({\n            type: 'DELETE',\n            payload: id\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const likePost = (id) => async(dispatch) =>{\n    try {\n        const {data} = await api.likePost(id);\n        dispatch({\n            type: 'LIKE',\n            payload: data\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}